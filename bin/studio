#! /usr/bin/env nix-shell
#! nix-shell -i bash -p nix

set -e

studio="$(dirname $(readlink -f $0))/.."

usage() {
    cat >&2 <<EOF
Studio - software diagnostics environment

Usage:

  studio <subcommand> options

Subcommands:

    snabb processes            Analyze a set of Snabb processes.
    snabb rstudio              Start RStudio IDE with Snabb modules.
    snabb vmprofile            Analyze "VMProfile" sampling profiler data.

snabb processes arguments:

    DIRECTORY                  Snabb process state directory to analyze.
                               Many directories can be specified.
    -g, --group GROUP          Group name for the following Snabb processes.
                               Use to assign Snabb processes to groups.

    -o, --output PATH          Create output (symlink to directory) at PATH.
    -v, --verbose              Print verbose trace information.
    -n, --nix ARGS             Extra arguments passed to nix-build.
    -j, --jobs NUM             Execute NUM build jobs in parallel.

snabb vmprofile arguments:

    DIRECTORY                  Snabb process state directory to analyze.

EOF
    exit 1
}

[ "$#" == 0 ] && usage
[ "$1" == "snabb" ] || usage
shift 1

error() {
    echo "error: $*" >&2
    exit 1
}

subcommand="$1"; shift
case "$subcommand" in
    --help|-h)
        usage
        ;;
    gui)
        gui
        ;;
    rstudio)
        nix-shell -j 10 $studio/tools/snabbr -A rstudio --run rstudio
        ;;
    vmprofile)
        tmpdir=$(mktemp -d)
        nixexpr=$tmpdir/vmprofile-analysis.nix
        [ "$#" == 1 ] || usage
        [ -d "$1/engine/vmprofile" ] || error "can't open directory $1/engine/vmprofile"
        path=$(readlink -f "$1")
        output="./result"
        cat > $nixexpr <<EOF
with import $studio/nix/import.nix {};
snabbVMProfileAnalysis $path
EOF
        storepath=$(nix-build $nixexpr)
        status=$?
        if [ $status == 0 ]; then
            echo "created $output -> $storepath"
        fi
        rm -rf $tmpdir
        exit $status
        ;;
    processes)
        tmpdir=$(mktemp -d)
        nixexpr=$tmpdir/process-report.nix
 
        cat > $nixexpr <<EOF
with import $studio/nix/import.nix {};
snabbProcessReport
  (snabbProcessSet [
EOF
        verbose="no"
        group="other"
        output="./result"
        while [ "$#" -gt 0 ]; do
            case "$1" in
                -n|--nix)
                    nix=$2
                    shift 2
                    ;;
                -j|--jobs)
                    parallel="-j $2"
                    shift 2
                    ;;
                -o|--output)
                    output="$2"
                    shift 2
                    ;;
                -v|--verbose)
                    verbose="yes"
                    shift 1
                    ;;
                -g|--group)
                    group=$2
                    shift 2
                    ;;
                *)
                    path=$(readlink -f $1)
                    checkfile=$path/engine/latency.histogram
                    [ -f "$checkfile" ] || error "cannot read $checkfile"
                    cat >> $nixexpr <<EOF
    (snabbProcessGroup "$group" [
      (snabbProcess (snabbProcessTarball $path)) ])
EOF
                    shift 1
                    ;;
            esac
        done
        cat >> $nixexpr <<EOF
  ])
EOF
        if [ "$verbose" == "yes" ]; then
            echo "nix expression:" >&2
            cat $nixexpr | sed 's/^/  /g' >&2
        fi
        storepath=$(nix-build $nix $parallel -o $output $nixexpr)
        status=$?
        if [ $status == 0 ]; then
            echo "created $output -> $storepath"
        fi
        rm -rf "$tmpdir"
        exit $status
        ;;
    *)
        echo "unrecognized subcommand: $subcommand"
        echo "use -h/--help for usage"
        ;;
esac
        
